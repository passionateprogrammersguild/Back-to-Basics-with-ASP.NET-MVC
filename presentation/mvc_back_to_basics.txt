#MVC 
<center><h2>Back to Basics</h2></center>

<div id="images" style="width:80%; margin:auto;">
   <div style="float:left">
      <img src="MVC.png"/>
   </div>
   <div style="margin-top:80px; float:left">
      <img src="arrow.png"/>
   </div>
   <div style="float:left">
      <img src="abc_blocks.jpg"/>
   </div>
</div>
<div style="position:absolute; bottom:0; left:20; width:100%;height:100px">
    <div style="float:left;height:100%;width:50%;">
        <span style="font-size:20px;">Michael Mann</span><br/>
        Sr. Software Engineer<br/>
        Red Rocket Solutions<br/>
    </div>
    <div style="float:right;height:100%;width:50%;">
    Email: mmann2943@gmai.com<br/>
    Blog: <a href="http://passionateprogrammersguild.com">http://passionateprogrammersguild.com</a><br/>
    GitHub: <a href="https://github.com/passionateprogrammersguild">https://github.com/passionateprogrammersguild</a>
    </div>
</div>

#In the Beginning
* Trygve M. H. Reenskaug documented the terms MVC while visiting the Smalltalk group at Xerox PARC in 1978
* Smalltalk included an implementation of MVC as a result of Trygve M. H. Reenskaug's work
* Several whitepapers where written on the subject including
    * THING-MODEL-VIEW-EDITOR - An Example of a planning system
    * MODELS - VIEWS - CONTROLLERS
    * The Model-View-Controller (MVC). - Its Past and Present
    * Applications Programming in Smalltalk-80(TM): How to use Model-View-Controller (MVC)
* The intent of MVC was to capture a representation of the users mental model of the domain
* MVC was initially called Thing-Model-View-Editor and developed into Model, View, Controller, Editor and Tool but MVC was the short version

#Definition of Terms
* Model - Holds the user’s object model with its information and behaviour, reflecting the user’s mental model of the domain. Model is responsible for informing the view when its state changes.
* View - Capable of showing one or more pictorial representations of the Model. A View is also able to perform such operations upon the Model that is reasonabely associated with that View.
* Controller - Receives user input, translates it into the appropriate messages and pass these messages on to one or more of the views
* Editor - Establishes and positions a given set of Views on the screen, coordinates them and provides the user with a suitable command interface.
* Tool  
    * A higher level of abstraction that supports a user through his or her various tasks.  
    * Plays the role of the Editor if there is only a single Editor; however if there are multiple editors the Tool will coordinate acitvities between the Editors.  
    * Advantages can be realized through semi-automatic tool generation  

#The MVC in ASP.NET MVC
* Model 
    * View models have become king recently where the model is primarily a container for data
    * Models do not communicate state changes to the View
    * Models are provided by the controller to the View
* View
    * The View is divided into two parts namely the View Engine and the ViewPage/ViewPage<T>
    * The View can be bound to a model but it is not required.
    * The View can be composed of multiple views called Partials
#DEMO

#Supplimenting ASP.NET MVC with other Tools

#Other Tools that Are Out There

#References
* [Trygve Reenskaug's Home Page](http://heim.ifi.uio.no/~trygver/)
* [MVC White Papers](http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html)
* [Naked Objects Home Page](http://nakedobjects.org/introduction.html)
* [github accout for presentation](https://github.com/passionateprogrammersguild/Back-to-Basics-with-ASP.NET-MVC)
* [Passionate Programmers Guild](http://passionateprogrammersguild.wordpress.com/)
