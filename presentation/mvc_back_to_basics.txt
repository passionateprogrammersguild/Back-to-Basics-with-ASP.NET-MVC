#MVC 
<center><h2>Back to Basics</h2></center>

<div id="images" style="width:70%; margin:auto;">
   <div style="float:left">
      <img src="MVC.png"/>
   </div>
   <div style="margin-top:80px; float:left">
      <img src="arrow.png"/>
   </div>
   <div style="float:left">
      <img src="abc_blocks.jpg"/>
   </div>
</div>
<div style="position:absolute; bottom:0; left:20; width:100%;height:100px">
    <div style="float:left;height:100%;width:50%;">
        <span style="font-size:20px;">Michael Mann</span><br/>
        Sr. Software Engineer<br/>
        Red Rocket Solutions<br/>
    </div>
    <div style="float:right;height:100%;width:50%;">
    Email: <a href="mailto:mmann2943@gmail.com">mmann2943@gmail.com</a><br/>
    Blog: <a href="http://passionateprogrammersguild.com">http://passionateprogrammersguild.com</a><br/>
    GitHub: <a href="https://github.com/passionateprogrammersguild">https://github.com/passionateprogrammersguild</a>
    </div>
</div>

#Why am I Doing this Presentation
<div style="width:50%; margin:auto">
   <img src="dilbert-buzzword.jpeg" title="All I heard were buzzwords like IOC, Testability, ModelBinders, Action Filters"/>
</div>

>When I started with ASP.NET MVC I heard buzzwords like testable, seperation of concerns, convention over configuration, and I appreciated and embraced those buzzwords, but I did not have a firm grasp of what the MVC pattern really was.

#Questions?
<div style="width:50%; margin:auto">
   <img src="Questions.jpg" title="A couple of questions to understand the audience and their understanding of the material"/>
</div>

#Tools of the Trade
<div style="width:50%; margin:auto">
   <img src="tools_of_the_trade.gif" title="What technology tools will be represented in the presentation"/>
</div>

* ASP.NET MVC2
* Web Forms View Engine
* .NET 3.5
* AutoFac 2.4.5
* jquery v1.4.1
* jquery.rating plugin

#In the Beginning
![Trygve M. Reenskaug](trygve.jpg "Hi my name is Trygve Reenskaug and I invented the MVC pattern in 1978 at Xerox PARC")

* University of Oslo Professor Trygve M. H. Reenskaug documented the terms MVC while visiting the Smalltalk group at Xerox PARC in 1978
* Smalltalk included an implementation of MVC as a result of Trygve M. H. Reenskaug's work
* Several whitepapers where written on the subject including
    * THING-MODEL-VIEW-EDITOR - An Example of a planning system
    * MODELS - VIEWS - CONTROLLERS
    * The Model-View-Controller (MVC). - Its Past and Present
    * Applications Programming in Smalltalk-80(TM): How to use Model-View-Controller (MVC)
* The intent of MVC was to capture a representation of the users mental model of the domain
* Naked objects was a design pattern established in 2004 by Richard Pawson that took MVC to the next level 

#MVC Pattern Communication
![MVC Communication](MVCCommunication.png "MVC Communication")

#MVC Pattern Definition of Terms
* Model - Holds the user’s object model with its information and behaviour, reflecting the user’s mental model of the domain. Model is responsible for informing the view when its state changes.
* View - Capable of showing one or more pictorial representations of the Model. 
* Controller - Receives user input, translates it into the appropriate messages and pass these messages on to one or more of the views or to the Model if a state change is warranted

#ASP.NET MVC Communication
![ASP.NET MVC Communication](AspNetMVCCommunication.png "ASP.NET MVC Communication")

#ASP.NET MVC Definition of Terms
* Model 
    * View models have become king recently where the model is primarily a container for data
    * Models do not communicate state changes to the View
    * Models are provided by the controller to the View
* View
    * The View is divided into two parts namely the View Engine and the ViewPage
    * The View can be bound to a model but it is not required.
    * The View can be composed of multiple views called Partials
    * Use of DisplayFor and EditorFor makes use of Partials to customize the view for the model
* Controller
    * Controller actions receives requests through the routing engine
    * The DefaultModelBinder translates parameters of the request into the arguments of the action method
    * You can write your own custom model binders
    * Responsible for determining what happens next in terms of the ActionResult returned 

#But What About Javascript Heavy Apps
![Javascript MVC Communication](JavascriptMVCCommunication.png "Javascript MVC Communication")

#Supplimenting ASP.NET MVC with other Tools
* Due to the execution boundry between the client and the server you may need MVC on the client
* [Knockout.js](http://http://knockoutjs.com/) is a javascript framework that implements MVVM on the client
* [Backbone.js](http://documentcloud.github.com/backbone/) seems to be a MVC framework without the C 
* [JavascriptMVC](http://www.javascriptmvc.com/) is what is says it is 

#DEMO

#References
* [Trygve Reenskaug's Home Page](http://heim.ifi.uio.no/~trygver/)
* [MVC White Papers](http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html)
* [Applications Programming in Smalltalk-80(TM): How to use Model-View-Controller (MVC)](http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html)
* [Naked Objects Thesis](http://downloads.nakedobjects.net/resources/Pawson%20thesis.pdf)
* [Naked Objects Home Page](http://nakedobjects.org/introduction.html)
* [github accout for presentation](https://github.com/passionateprogrammersguild/Back-to-Basics-with-ASP.NET-MVC)
* [Passionate Programmers Guild](http://passionateprogrammersguild.wordpress.com/)
